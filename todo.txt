### TODO:

### 后期
	* network 更换后，调整一下头文件。部分头文件应该可以移动到cpp中。(现在暴露主要是hpsocket存在一些头文件顺序的依赖。)

### 多生产 多消费者: 考虑换掉lockqueue(回头看场景是否支持.)
	linux内核kqueue, 这个库支持任意长度的对象入库，代码不到百行，在linux中效率之高，令人叫赞。
	boost lock_free_queue;

// TODO:
//  * epoll 监听一个不存在的socket 和 监听一个已经close的socket 会产生什么情况？
//  * call close socket 是触发什么事件?
//  * 主连接断开后，观察其他连接是不是会自动断开?
//
//	* 基础的一个demo：用来测试功能的完备性.
//	* 需要一个用例去测试，多个连接开开关关，会不会真正完全都关闭了——主要关注连接的socket有没有都正常的关闭了。避免长期开启的fd资源耗尽
//		* 单独一个测试用例
//	* 测试40k个链接的可行性
//	* 优化日志
//		* 提供选择方式：可以设置net的日志key 和 日志等级的设置
//		* 在P和D版本内增加更多日志。
//	* 独立network为一个项目
//	* 跑随机数据数天看是否会崩溃或有数据不一致的问题。用家里多核cpu去跑
//	* lockfree的实现(放在网关后面)
//	* 对应的消息文档：可以写到doc里面

